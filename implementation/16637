from collections import deque
import sys
input = sys.stdin.readline


def cal(a, op, b):
    if op == "*":
        return a * b
    if op == "+":
        return a + b
    return a - b


check_combinations = []


def euqation_calcuation(eq):
    while len(eq) != 1:
        first = eq.popleft()
        operator = eq.popleft()
        second = eq.popleft()
        eq.appendleft(cal(first, operator, second))

    return eq[0]


def combinations(num):
    result = []

    def check(cur: set, start):
        if cur:
            result.append(cur)

        for i in range(start, num + 1):
            check(cur | set([i]), i+2)

    check(set(), 1)

    return result


n = int(input())
eq = input().strip()

if n == 1:
    print(eq[0])
    exit()

eq_lst = []
op_len = n // 2
for thing in eq:
    try:
        eq_lst.append(int(thing))
    except Exception:
        eq_lst.append(thing)


global_ans = []
for pre_cal_lst in combinations(n//2):

    q = deque()
    visited = [0] * n
    for idx in range(1, op_len + 1):
        real_idx = 2*idx - 1
        if idx in pre_cal_lst:
            q.append(cal(eq_lst[real_idx-1],
                         eq_lst[real_idx], eq_lst[real_idx + 1]))
            visited[real_idx - 1], visited[real_idx], visited[real_idx + 1] = 1, 1, 1
        else:
            if visited[real_idx - 1] == 0:
                q.append(eq_lst[real_idx-1])
            q.append(eq_lst[real_idx])
            if idx == op_len:
                q.append(eq_lst[real_idx + 1])

    global_ans.append(euqation_calcuation(q))

print(max(global_ans))
